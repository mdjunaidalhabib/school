import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      console.log("üì• Received Data:", req.body); // ‡¶è‡¶ñ‡¶æ‡¶®‡ßá ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡ßã

      const {
        imageUrl,
        name,
        arabicName,
        nid,
        gender,
        dob,
        age,
        phone,
        selectedDivisionId,
        selectedPreviousClass,
        selectedCurrentClass,
        fatherName,
        fatherarabicName,
        fatherNid,
        fatherPhone,
        fatherOccupation,
        motherName,
        motherNid,
        motherPhone,
        motherOccupation,
        selectedDivision,
        selectedDistrict,
        selectedThana,
        village
      } = req.body;

      // ‡¶°‡ßá‡¶ü‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶≤‡¶ø‡¶°‡ßá‡¶∂‡¶® (‡¶ê‡¶ö‡ßç‡¶õ‡¶ø‡¶ï)
      if (!name || !nid || !phone || !dob) {
        return res.status(400).json({ success: false, message: '‡¶Ö‡¶¨‡¶∂‡ßç‡¶Ø‡¶á ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßç‡¶∞‡¶¶‡¶æ‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®' });
      }

      // Prisma ‡¶¶‡¶ø‡ßü‡ßá ‡¶∏‡ßç‡¶ü‡ßÅ‡¶°‡ßá‡¶®‡ßç‡¶ü ‡¶§‡ßà‡¶∞‡¶ø ‡¶ï‡¶∞‡¶æ
      const admission = await prisma.student.create({
        data: {
          imageUrl,
          name,
          arabicName,
          nid,
          gender,
          dob,
          age,
          phone,
          academicDivisionId: selectedDivisionId,
          previousClassId: selectedPreviousClass,
          currentClassId: selectedCurrentClass,
          fatherName,
          fatherarabicName,
          fatherNid,
          fatherPhone,
          fatherOccupation,
          motherName,
          motherNid,
          motherPhone,
          motherOccupation,
          areaDivisionId: selectedDivision,
          districtId: selectedDistrict,
          thanaId: selectedThana,
          village,
        },
      });

      return res.status(201).json({ success: true, message: '‡¶≠‡¶∞‡ßç‡¶§‡¶ø ‡¶∏‡¶´‡¶≤‡¶≠‡¶æ‡¶¨‡ßá ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá', admission });
    } catch (error) {
      console.error("Error details:", error);
      return res.status(500).json({ success: false, message: '‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá, ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®', error: error.message });
    }
  }

  res.status(405).json({ success: false, message: 'Invalid Request Method' });
}