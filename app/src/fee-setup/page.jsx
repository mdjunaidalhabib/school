"use client";

import "../../globals.css";
import { useState, useMemo } from "react";
import axios from "axios";
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";

export default function FeeSetupForm() {
  const [selectedDivisionId, setSelectedDivisionId] = useState("");
  const [selectedPreviousClass, setSelectedPreviousClass] = useState("");
  const [admissionFee, setAdmissionFee] = useState("");
  const [monthlyFee, setMonthlyFee] = useState("");
  const [firstTermFee, setFirstTermFee] = useState("");
  const [secondTermFee, setSecondTermFee] = useState("");
  const [annualFee, setAnnualFee] = useState("");
  const [monthlyTermFee, setMonthlyTermFee] = useState("");
  const [hostelFee, setHostelFee] = useState("");
  const [otherFee, setOtherFee] = useState("");
  const [totalFee, setTotalFee] = useState("");

  const [editingId, setEditingId] = useState(null);

  const queryClient = useQueryClient();

  // ЁЯФ╣ ржПржХрж╛ржбрзЗржорж┐ржХ ржбрж┐ржнрж┐рж╢ржи API ржерзЗржХрзЗ рж▓рзЛржб
  const { data: academicDivisions } = useQuery({
    queryKey: ["academicDivisions"],
    queryFn: async () => {
      const response = await axios.get("/api/academicDivisions");
      return response.data;
    },
  });

  // ЁЯФ╣ ржПржХрж╛ржбрзЗржорж┐ржХ ржХрзНрж▓рж╛рж╕ API ржерзЗржХрзЗ рж▓рзЛржб
  const { data: academicClasses } = useQuery({
    queryKey: ["academicClasses"],
    queryFn: async () => {
      const response = await axios.get("/api/academicClasses");
      return response.data;
    },
  });

  // ЁЯФ╣ ржлрж┐ рж╕рзЗржЯржЖржк ржбрж╛ржЯрж╛ API ржерзЗржХрзЗ рж▓рзЛржб
  const { data: feeData } = useQuery({
    queryKey: ["feeSetup"],
    queryFn: async () => {
      const response = await axios.get("/api/fee-setup");
      return response.data;
    },
  });

  // ржорзЛржЯ ржЯрж╛ржХрж╛ ржХрзНржпрж╛рж▓ржХрзБрж▓рзЗржЯ ржХрж░рж╛рж░ ржлрж╛ржВрж╢ржи
  const calculateTotalFee = () => {
    return (
      (parseFloat(admissionFee) || 0) +
      (parseFloat(monthlyFee) || 0) +
      (parseFloat(firstTermFee) || 0) +
      (parseFloat(secondTermFee) || 0) +
      (parseFloat(annualFee) || 0) +
      (parseFloat(monthlyTermFee) || 0) +
      (parseFloat(hostelFee) || 0) +
      (parseFloat(otherFee) || 0)
    );
  };

  // ЁЯФ╣ ржирждрзБржи ржлрж┐ рж╕рзЗржЯржЖржк ржорж┐ржЙржЯрзЗрж╢ржи
  const mutation = useMutation({
    mutationFn: async (payload) => {
      if (editingId) {
        return axios.put("/api/fee-setup", { id: editingId, ...payload });
      } else {
        return axios.post("/api/fee-setup", payload);
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries(["feeSetup"]);
      resetForm();
    },
  });

  // ЁЯФ╣ ржлрж┐ рж╕рзЗржЯржЖржк ржбрж┐рж▓рж┐ржЯ ржХрж░рж╛
  const handleDelete = async (id) => {
    try {
      await axios.delete(`/api/fee-setup?id=${id}`);
      queryClient.invalidateQueries(["feeSetup"]);
    } catch (error) {
      console.error("ржбрж┐рж▓рж┐ржЯрзЗ рж╕ржорж╕рзНржпрж╛:", error);
    }
  };

  // ЁЯФ╣ ржПржбрж┐ржЯ ржорзЛржбрзЗ ржирзЗржУрзЯрж╛
  const handleEdit = (fee) => {
    setEditingId(fee.id);
    setSelectedDivisionId(fee.academicDivisionId);
    setSelectedPreviousClass(fee.academicClassId);
    setAdmissionFee(fee.admissionFee);
    setMonthlyFee(fee.monthlyFee);
    setFirstTermFee(fee.firstTermFee);
    setSecondTermFee(fee.secondTermFee);
    setAnnualFee(fee.annualFee);
    setMonthlyTermFee(fee.setMonthlyTermFee);
    setHostelFee(fee.hostelFee);
    setOtherFee(fee.otherFee);
    setTotalFee(fee.totalFee);
  };

  // ЁЯФ╣ ржЗржиржкрзБржЯ рж░рж┐рж╕рзЗржЯ ржХрж░рж╛
  const resetForm = () => {
    setEditingId(null);
    setSelectedDivisionId("");
    setSelectedPreviousClass("");
    setAdmissionFee("");
    setMonthlyFee("");
    setFirstTermFee("");
    setSecondTermFee("");
    setAnnualFee("");
    setMonthlyTermFee("");
    setHostelFee("");
    setOtherFee("");
    setTotalFee("");
  };

  // ЁЯФ╣ ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рж╛ ржХрзНрж▓рж╛рж╕ рж▓рж┐рж╕рзНржЯ
  const filteredClasses = useMemo(() => {
    return selectedDivisionId
      ? academicClasses?.filter(
          (cls) => cls.academicDivisionId === Number(selectedDivisionId)
        )
      : academicClasses;
  }, [selectedDivisionId, academicClasses]);

  // ЁЯФ╣ ржирждрзБржи ржлрж┐ рж╕рзЗржЯржЖржк рж╕рж╛ржмржорж┐ржЯ
  const handleSubmit = async (e) => {
    e.preventDefault();
    mutation.mutate({
      academicDivisionId: Number(selectedDivisionId),
      academicClassId: Number(selectedPreviousClass),
      admissionFee,
      monthlyFee,
      firstTermFee,
      secondTermFee,
      annualFee,
      monthlyTermFee,
      hostelFee,
      otherFee,
      totalFee: calculateTotalFee(), // ржорзЛржЯ ржлрж┐ рж╕рзЗржЯ ржХрж░рж╛
    });
  };

  return (
    <div className="p-6 max-w-4xl mx-auto ">
      <h2 className="text-2xl font-bold mb-4">
        {editingId ? "ржлрж┐ ржЖржкржбрзЗржЯ ржХрж░рзБржи" : "ржирждрзБржи ржлрж┐ рж╕рзЗржЯржЖржк ржХрж░рзБржи"}
      </h2>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label htmlFor="selectedDivision">ржмрж┐ржнрж╛ржЧ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</label>
          <select
            id="selectedDivision"
            value={selectedDivisionId}
            onChange={(e) => setSelectedDivisionId(e.target.value)}
            className="w-full p-3 border rounded"
          >
            <option value="">ржмрж┐ржнрж╛ржЧ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>
            {academicDivisions?.map((division) => (
              <option key={division.id} value={division.id}>
                {division.name}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label htmlFor="selectedPreviousClass">ржХрзНрж▓рж╛рж╕ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</label>
          <select
            id="selectedPreviousClass"
            value={selectedPreviousClass}
            onChange={(e) => setSelectedPreviousClass(e.target.value)}
            className="w-full p-3 border rounded"
          >
            <option value="">ржХрзНрж▓рж╛рж╕ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи</option>
            {filteredClasses?.map((cls) => (
              <option key={cls.id} value={cls.id}>
                {cls.name}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label htmlFor="admissionFee">ржнрж░рзНрждрж┐ ржлрж┐</label>
          <input
            id="admissionFee"
            type="number"
            placeholder="ржнрж░рзНрждрж┐ ржлрж┐"
            value={admissionFee}
            onChange={(e) => setAdmissionFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        <div>
          <label htmlFor="monthlyFee">ржорж╛рж╕рж┐ржХ ржлрж┐</label>
          <input
            id="monthlyFee"
            type="number"
            placeholder="ржорж╛рж╕рж┐ржХ ржлрж┐"
            value={monthlyFee}
            onChange={(e) => setMonthlyFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        <div>
          <label htmlFor="firstTermFee">ржкрзНрж░ржержо рж╕рж╛ржорзЯрж┐ржХ ржлрж┐</label>
          <input
            id="firstTermFee"
            type="number"
            placeholder="ржкрзНрж░ржержо рж╕рж╛ржорзЯрж┐ржХ ржлрж┐"
            value={firstTermFee}
            onChange={(e) => setFirstTermFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        <div>
          <label htmlFor="secondTermFee">ржжрзНржмрж┐рждрзАрзЯ рж╕рж╛ржорзЯрж┐ржХ ржлрж┐</label>
          <input
            id="secondTermFee"
            type="number"
            placeholder="ржжрзНржмрж┐рждрзАрзЯ рж╕рж╛ржорзЯрж┐ржХ ржлрж┐"
            value={secondTermFee}
            onChange={(e) => setSecondTermFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        <div>
          <label htmlFor="annualFee">ржмрж╛рж░рзНрж╖рж┐ржХ ржлрж┐</label>
          <input
            id="annualFee"
            type="number"
            placeholder="ржмрж╛рж░рзНрж╖рж┐ржХ ржлрж┐"
            value={annualFee}
            onChange={(e) => setAnnualFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        <div>
          <label htmlFor="monthlyTermFee">ржорж╛рж╕рж┐ржХ ржкрж░рж┐ржХрзНрж╖рж╛ ржлрж┐</label>
          <input
            id="monthlyTermFee"
            type="number"
            placeholder="ржорж╛рж╕рж┐ржХ ржкрж░рж┐ржХрзНрж╖рж╛ ржлрж┐"
            value={monthlyTermFee}
            onChange={(e) => setMonthlyTermFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        <div>
          <label htmlFor="hostelFee">рж░рзБржо ржлрж┐</label>
          <input
            id="hostelFee"
            type="number"
            placeholder="рж░рзБржо ржлрж┐"
            value={hostelFee}
            onChange={(e) => setHostelFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        <div>
          <label htmlFor="otherFee">ржЕржирзНржпрж╛ржирзНржп ржлрж┐</label>
          <input
            id="otherFee"
            type="number"
            placeholder="ржЕржирзНржпрж╛ржирзНржп ржлрж┐"
            value={otherFee}
            onChange={(e) => setOtherFee(parseFloat(e.target.value) || 0)}
            className="w-full p-2 border rounded"
          />
        </div>

        {/* ржорзЛржЯ ржлрж┐ */}
        <div className="mb-4">
          <label className="block text-sm font-medium">ржорзЛржЯ ржлрж┐</label>
          <input
            type="number"
            name="totalFee"
            value={calculateTotalFee()}
            readOnly
            className="w-full px-3 py-2 border rounded-md bg-gray-100"
          />
        </div>

        <button
          type="submit"
          className="w-full bg-blue-500 text-white p-2 rounded"
        >
          {mutation.isLoading
            ? "рж▓рзЛржб рж╣ржЪрзНржЫрзЗ..."
            : editingId
              ? "ржЖржкржбрзЗржЯ ржХрж░рзБржи"
              : "рж╕ржВрж░ржХрзНрж╖ржг ржХрж░рзБржи"}
        </button>
      </form>

      {/* ржлрж┐ ржбрзЗржЯрж╛ ржкрзНрж░ржжрж░рзНрж╢ржи ржХрж░рж╛ */}
      {feeData?.length > 0 && (
        <div className="overflow-x-auto mt-4">
          <table className="min-w-full table-auto border-collapse">
            <thead>
              <tr className="bg-gray-100">
                <th className="px-4 py-2 border">ржмрж┐ржнрж╛ржЧ</th>
                <th className="px-4 py-2 border">ржХрзНрж▓рж╛рж╕</th>
                <th className="px-4 py-2 border">ржнрж░рзНрждрж┐ ржлрж┐</th>
                <th className="px-4 py-2 border">ржорж╛рж╕рж┐ржХ ржлрж┐</th>
                <th className="px-4 py-2 border">ржкрзНрж░ржержо рж╕рж╛ржорзЯрж┐ржХ ржлрж┐</th>
                <th className="px-4 py-2 border">ржжрзНржмрж┐рждрзАрзЯ рж╕рж╛ржорзЯрж┐ржХ ржлрж┐</th>
                <th className="px-4 py-2 border">ржмрж╛рж░рзНрж╖рж┐ржХ ржлрж┐</th>
                <th className="px-4 py-2 border">ржорж╛рж╕рж┐ржХ ржкрж░рж┐ржХрзНрж╖рж╛ ржлрж┐</th>
                <th className="px-4 py-2 border">рж░рзБржо ржлрж┐</th>
                <th className="px-4 py-2 border">ржЕржирзНржпрж╛ржирзНржп ржлрж┐</th>
                <th className="px-4 py-2 border">ржорзЛржЯ ржлрж┐</th>
                <th className="px-4 py-2 border">ржЕржкрж╢ржи</th>
              </tr>
            </thead>
            <tbody>
              {feeData.map((fee) => (
                <tr key={fee.id} className="border-b">
                  <td className="px-4 py-2 border">
                    {fee.academicDivision?.name || "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.academicClass?.name || "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.admissionFee ? fee.admissionFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.monthlyFee ? fee.monthlyFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.firstTermFee ? fee.firstTermFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.secondTermFee ? fee.secondTermFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.annualFee ? fee.annualFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.monthlyTermFee ? fee.monthlyTermFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.hostelFee ? fee.hostelFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.otherFee ? fee.otherFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    {fee.totalFee ? fee.totalFee : "ржирж┐рж░рзНржзрж╛рж░рж┐ржд рж╣рзЯржирж┐"}
                  </td>
                  <td className="px-4 py-2 border">
                    <button
                      onClick={() => handleEdit(fee)}
                      className="bg-yellow-500 text-white p-2 rounded"
                    >
                      ржПржбрж┐ржЯ ржХрж░рзБржи
                    </button>
                    <button
                      onClick={() => handleDelete(fee.id)}
                      className="bg-red-500 text-white p-2 rounded ml-2"
                    >
                      ржбрж┐рж▓рж┐ржЯ ржХрж░рзБржи
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}
